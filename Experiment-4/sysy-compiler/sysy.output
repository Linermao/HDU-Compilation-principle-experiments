Nonterminals useless in grammar

    FuncDef
    FuncType


Terminals unused in grammar

    THEN


Rules useless in grammar

  100 FuncDef: FuncType IDENT LPAREN RPAREN Block
  101        | FuncType IDENT LPAREN FuncFParams RPAREN Block

  102 FuncType: INT
  103         | VOID


State 55 conflicts: 1 shift/reduce
State 59 conflicts: 1 shift/reduce
State 183 conflicts: 1 shift/reduce


Grammar

    0 $accept: CompUnit $end

    1 CompUnit: CompUnits

    2 CompUnits: FuncDefOrVarDecl
    3          | ConstDecl
    4          | CompUnits FuncDefOrVarDecl
    5          | CompUnits ConstDecl
    6          | VOID FuncDef_
    7          | CompUnits VOID FuncDef_

    8 FuncDefOrVarDecl: BType FuncDef_
    9                 | BType VarDecl_

   10 Decl: ConstDecl
   11     | VarDecl

   12 ConstDecl: CONST BType ConstDef SEMI

   13 BType: INT

   14 ConstDef: IDENT ASSIGN ConstInitVal
   15         | IDENT ASSIGN ConstInitVal COMMA ConstDef
   16         | IDENT LBRACKET Bracket RBRACKET ASSIGN ConstInitVal
   17         | IDENT LBRACKET ConstExp RBRACKET ASSIGN ConstInitVal COMMA ConstDef

   18 Bracket: LBRACKET ConstExp RBRACKET
   19        | LBRACKET ConstExp RBRACKET Bracket

   20 ConstInitVal: ConstExp
   21             | LBRACE Brace RBRACE
   22             | LBRACE RBRACE

   23 Brace: ConstInitVal
   24      | ConstInitVal COMMA Brace

   25 ConstExp: Exp
   26         | Exp COMMA ConstExp

   27 VarDecl: BType VarDef SEMI

   28 VarDecl_: VarDef SEMI

   29 VarDef: IDENT
   30       | IDENT ASSIGN InitVal
   31       | IDENT Bracket
   32       | IDENT Bracket ASSIGN InitVal
   33       | IDENT COMMA VarDef
   34       | IDENT ASSIGN InitVal COMMA VarDef
   35       | IDENT Bracket COMMA VarDef
   36       | IDENT Bracket ASSIGN InitVal COMMA VarDef

   37 InitVal: Exp
   38        | LBRACE RBRACE
   39        | LBRACE Brace RBRACE

   40 FuncDef_: IDENT LPAREN RPAREN Block
   41         | IDENT LPAREN FuncFParams RPAREN Block

   42 FuncFParams: FuncFParam

   43 FuncFParam: BType IDENT
   44           | BType IDENT LBRACKET RBRACKET
   45           | BType IDENT LBRACKET RBRACKET Bracket
   46           | BType IDENT COMMA FuncFParam
   47           | BType IDENT LBRACKET RBRACKET COMMA FuncFParam
   48           | BType IDENT LBRACKET RBRACKET Bracket COMMA FuncFParam

   49 Block: LBRACE BlockItem RBRACE

   50 BlockItem: Decl
   51          | Stmt
   52          | Decl BlockItem
   53          | Stmt BlockItem

   54 Stmt: LVal ASSIGN Exp SEMI
   55     | SEMI
   56     | Exp SEMI
   57     | Block
   58     | RETURN SEMI
   59     | RETURN Exp SEMI
   60     | IF LPAREN Exp RPAREN Stmt
   61     | IF LPAREN Exp RPAREN Stmt ELSE Stmt
   62     | WHILE LPAREN Exp RPAREN Stmt
   63     | BREAK SEMI
   64     | CONTINUE SEMI

   65 Exp: LOrExp
   66    | LOrExp COMMA Exp

   67 LVal: IDENT
   68     | IDENT LBRACKET Exp RBRACKET

   69 PrimaryExp: LPAREN Exp RPAREN
   70           | Number
   71           | LVal

   72 Number: INT_CONST

   73 UnaryExp: PrimaryExp
   74         | UnaryOp UnaryExp
   75         | IDENT LPAREN RPAREN
   76         | IDENT LPAREN FuncRParams RPAREN

   77 UnaryOp: ADD
   78        | SUB
   79        | '!'

   80 FuncRParams: Exp

   81 MulExp: UnaryExp
   82       | MulExp MUL UnaryExp
   83       | MulExp DIV UnaryExp
   84       | MulExp MOD UnaryExp

   85 AddExp: MulExp
   86       | AddExp ADD MulExp
   87       | AddExp SUB MulExp

   88 RelExp: AddExp
   89       | RelExp '<' AddExp
   90       | RelExp '>' AddExp
   91       | RelExp LE AddExp
   92       | RelExp GE AddExp

   93 EqExp: RelExp
   94      | EqExp EQ RelExp
   95      | EqExp NE RelExp

   96 LAndExp: EqExp
   97        | LAndExp AND EqExp

   98 LOrExp: LAndExp
   99       | LOrExp OR LAndExp


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 79
    '<' (60) 89
    '>' (62) 90
    error (256)
    IDENT <str_val> (258) 14 15 16 17 29 30 31 32 33 34 35 36 40 41 43 44 45 46 47 48 67 68 75 76
    INT <str_val> (259) 13
    RETURN <str_val> (260) 58 59
    CONST <str_val> (261) 12
    VOID <str_val> (262) 6 7
    LE <str_val> (263) 91
    GE <str_val> (264) 92
    EQ <str_val> (265) 94
    NE <str_val> (266) 95
    AND <str_val> (267) 97
    OR <str_val> (268) 99
    IF <str_val> (269) 60 61
    THEN <str_val> (270)
    ELSE <str_val> (271) 61
    WHILE <str_val> (272) 62
    CONTINUE <str_val> (273) 64
    BREAK <str_val> (274) 63
    ADD <str_val> (275) 77 86
    SUB <str_val> (276) 78 87
    MUL <str_val> (277) 82
    DIV <str_val> (278) 83
    MOD <str_val> (279) 84
    ASSIGN <str_val> (280) 14 15 16 17 30 32 34 36 54
    SEMI <str_val> (281) 12 27 28 54 55 56 58 59 63 64
    COMMA <str_val> (282) 15 17 24 26 33 34 35 36 46 47 48 66
    LPAREN <str_val> (283) 40 41 60 61 62 69 75 76
    RPAREN <str_val> (284) 40 41 60 61 62 69 75 76
    LBRACE <str_val> (285) 21 22 38 39 49
    RBRACE <str_val> (286) 21 22 38 39 49
    LBRACKET <str_val> (287) 16 17 18 19 44 45 47 48 68
    RBRACKET <str_val> (288) 16 17 18 19 44 45 47 48 68
    INT_CONST <int_val> (289) 72


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    CompUnit (39)
        on left: 1
        on right: 0
    CompUnits <ast_val> (40)
        on left: 2 3 4 5 6 7
        on right: 1 4 5 7
    FuncDefOrVarDecl <ast_val> (41)
        on left: 8 9
        on right: 2 4
    Decl <ast_val> (42)
        on left: 10 11
        on right: 50 52
    ConstDecl <ast_val> (43)
        on left: 12
        on right: 3 5 10
    BType <ast_val> (44)
        on left: 13
        on right: 8 9 12 27 43 44 45 46 47 48
    ConstDef <ast_val> (45)
        on left: 14 15 16 17
        on right: 12 15 17
    Bracket <ast_val> (46)
        on left: 18 19
        on right: 16 19 31 32 35 36 45 48
    ConstInitVal <ast_val> (47)
        on left: 20 21 22
        on right: 14 15 16 17 23 24
    Brace <ast_val> (48)
        on left: 23 24
        on right: 21 24 39
    ConstExp <ast_val> (49)
        on left: 25 26
        on right: 17 18 19 20 26
    VarDecl <ast_val> (50)
        on left: 27
        on right: 11
    VarDecl_ <ast_val> (51)
        on left: 28
        on right: 9
    VarDef <ast_val> (52)
        on left: 29 30 31 32 33 34 35 36
        on right: 27 28 33 34 35 36
    InitVal <ast_val> (53)
        on left: 37 38 39
        on right: 30 32 34 36
    FuncDef_ <ast_val> (54)
        on left: 40 41
        on right: 6 7 8
    FuncFParams <ast_val> (55)
        on left: 42
        on right: 41
    FuncFParam <ast_val> (56)
        on left: 43 44 45 46 47 48
        on right: 42 46 47 48
    Block <ast_val> (57)
        on left: 49
        on right: 40 41 57
    BlockItem <ast_val> (58)
        on left: 50 51 52 53
        on right: 49 52 53
    Stmt <ast_val> (59)
        on left: 54 55 56 57 58 59 60 61 62 63 64
        on right: 51 53 60 61 62
    Exp <ast_val> (60)
        on left: 65 66
        on right: 25 26 37 54 56 59 60 61 62 66 68 69 80
    LVal <ast_val> (61)
        on left: 67 68
        on right: 54 71
    PrimaryExp <ast_val> (62)
        on left: 69 70 71
        on right: 73
    Number <ast_val> (63)
        on left: 72
        on right: 70
    UnaryExp <ast_val> (64)
        on left: 73 74 75 76
        on right: 74 81 82 83 84
    UnaryOp <str_val> (65)
        on left: 77 78 79
        on right: 74
    FuncRParams <ast_val> (66)
        on left: 80
        on right: 76
    MulExp <ast_val> (67)
        on left: 81 82 83 84
        on right: 82 83 84 85 86 87
    AddExp <ast_val> (68)
        on left: 85 86 87
        on right: 86 87 88 89 90 91 92
    RelExp <ast_val> (69)
        on left: 88 89 90 91 92
        on right: 89 90 91 92 93 94 95
    EqExp <ast_val> (70)
        on left: 93 94 95
        on right: 94 95 96 97
    LAndExp <ast_val> (71)
        on left: 96 97
        on right: 97 98 99
    LOrExp <ast_val> (72)
        on left: 98 99
        on right: 65 66 99


State 0

    0 $accept: . CompUnit $end

    INT    shift, and go to state 1
    CONST  shift, and go to state 2
    VOID   shift, and go to state 3

    CompUnit          go to state 4
    CompUnits         go to state 5
    FuncDefOrVarDecl  go to state 6
    ConstDecl         go to state 7
    BType             go to state 8


State 1

   13 BType: INT .

    $default  reduce using rule 13 (BType)


State 2

   12 ConstDecl: CONST . BType ConstDef SEMI

    INT  shift, and go to state 1

    BType  go to state 9


State 3

    6 CompUnits: VOID . FuncDef_

    IDENT  shift, and go to state 10

    FuncDef_  go to state 11


State 4

    0 $accept: CompUnit . $end

    $end  shift, and go to state 12


State 5

    1 CompUnit: CompUnits .
    4 CompUnits: CompUnits . FuncDefOrVarDecl
    5          | CompUnits . ConstDecl
    7          | CompUnits . VOID FuncDef_

    INT    shift, and go to state 1
    CONST  shift, and go to state 2
    VOID   shift, and go to state 13

    $default  reduce using rule 1 (CompUnit)

    FuncDefOrVarDecl  go to state 14
    ConstDecl         go to state 15
    BType             go to state 8


State 6

    2 CompUnits: FuncDefOrVarDecl .

    $default  reduce using rule 2 (CompUnits)


State 7

    3 CompUnits: ConstDecl .

    $default  reduce using rule 3 (CompUnits)


State 8

    8 FuncDefOrVarDecl: BType . FuncDef_
    9                 | BType . VarDecl_

    IDENT  shift, and go to state 16

    VarDecl_  go to state 17
    VarDef    go to state 18
    FuncDef_  go to state 19


State 9

   12 ConstDecl: CONST BType . ConstDef SEMI

    IDENT  shift, and go to state 20

    ConstDef  go to state 21


State 10

   40 FuncDef_: IDENT . LPAREN RPAREN Block
   41         | IDENT . LPAREN FuncFParams RPAREN Block

    LPAREN  shift, and go to state 22


State 11

    6 CompUnits: VOID FuncDef_ .

    $default  reduce using rule 6 (CompUnits)


State 12

    0 $accept: CompUnit $end .

    $default  accept


State 13

    7 CompUnits: CompUnits VOID . FuncDef_

    IDENT  shift, and go to state 10

    FuncDef_  go to state 23


State 14

    4 CompUnits: CompUnits FuncDefOrVarDecl .

    $default  reduce using rule 4 (CompUnits)


State 15

    5 CompUnits: CompUnits ConstDecl .

    $default  reduce using rule 5 (CompUnits)


State 16

   29 VarDef: IDENT .
   30       | IDENT . ASSIGN InitVal
   31       | IDENT . Bracket
   32       | IDENT . Bracket ASSIGN InitVal
   33       | IDENT . COMMA VarDef
   34       | IDENT . ASSIGN InitVal COMMA VarDef
   35       | IDENT . Bracket COMMA VarDef
   36       | IDENT . Bracket ASSIGN InitVal COMMA VarDef
   40 FuncDef_: IDENT . LPAREN RPAREN Block
   41         | IDENT . LPAREN FuncFParams RPAREN Block

    ASSIGN    shift, and go to state 24
    COMMA     shift, and go to state 25
    LPAREN    shift, and go to state 22
    LBRACKET  shift, and go to state 26

    $default  reduce using rule 29 (VarDef)

    Bracket  go to state 27


State 17

    9 FuncDefOrVarDecl: BType VarDecl_ .

    $default  reduce using rule 9 (FuncDefOrVarDecl)


State 18

   28 VarDecl_: VarDef . SEMI

    SEMI  shift, and go to state 28


State 19

    8 FuncDefOrVarDecl: BType FuncDef_ .

    $default  reduce using rule 8 (FuncDefOrVarDecl)


State 20

   14 ConstDef: IDENT . ASSIGN ConstInitVal
   15         | IDENT . ASSIGN ConstInitVal COMMA ConstDef
   16         | IDENT . LBRACKET Bracket RBRACKET ASSIGN ConstInitVal
   17         | IDENT . LBRACKET ConstExp RBRACKET ASSIGN ConstInitVal COMMA ConstDef

    ASSIGN    shift, and go to state 29
    LBRACKET  shift, and go to state 30


State 21

   12 ConstDecl: CONST BType ConstDef . SEMI

    SEMI  shift, and go to state 31


State 22

   40 FuncDef_: IDENT LPAREN . RPAREN Block
   41         | IDENT LPAREN . FuncFParams RPAREN Block

    INT     shift, and go to state 1
    RPAREN  shift, and go to state 32

    BType        go to state 33
    FuncFParams  go to state 34
    FuncFParam   go to state 35


State 23

    7 CompUnits: CompUnits VOID FuncDef_ .

    $default  reduce using rule 7 (CompUnits)


State 24

   30 VarDef: IDENT ASSIGN . InitVal
   34       | IDENT ASSIGN . InitVal COMMA VarDef

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 40
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    InitVal     go to state 43
    Exp         go to state 44
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 25

   33 VarDef: IDENT COMMA . VarDef

    IDENT  shift, and go to state 56

    VarDef  go to state 57


State 26

   18 Bracket: LBRACKET . ConstExp RBRACKET
   19        | LBRACKET . ConstExp RBRACKET Bracket

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    ConstExp    go to state 58
    Exp         go to state 59
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 27

   31 VarDef: IDENT Bracket .
   32       | IDENT Bracket . ASSIGN InitVal
   35       | IDENT Bracket . COMMA VarDef
   36       | IDENT Bracket . ASSIGN InitVal COMMA VarDef

    ASSIGN  shift, and go to state 60
    COMMA   shift, and go to state 61

    $default  reduce using rule 31 (VarDef)


State 28

   28 VarDecl_: VarDef SEMI .

    $default  reduce using rule 28 (VarDecl_)


State 29

   14 ConstDef: IDENT ASSIGN . ConstInitVal
   15         | IDENT ASSIGN . ConstInitVal COMMA ConstDef

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 62
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    ConstInitVal  go to state 63
    ConstExp      go to state 64
    Exp           go to state 59
    LVal          go to state 45
    PrimaryExp    go to state 46
    Number        go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49
    MulExp        go to state 50
    AddExp        go to state 51
    RelExp        go to state 52
    EqExp         go to state 53
    LAndExp       go to state 54
    LOrExp        go to state 55


State 30

   16 ConstDef: IDENT LBRACKET . Bracket RBRACKET ASSIGN ConstInitVal
   17         | IDENT LBRACKET . ConstExp RBRACKET ASSIGN ConstInitVal COMMA ConstDef

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACKET   shift, and go to state 26
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Bracket     go to state 65
    ConstExp    go to state 66
    Exp         go to state 59
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 31

   12 ConstDecl: CONST BType ConstDef SEMI .

    $default  reduce using rule 12 (ConstDecl)


State 32

   40 FuncDef_: IDENT LPAREN RPAREN . Block

    LBRACE  shift, and go to state 67

    Block  go to state 68


State 33

   43 FuncFParam: BType . IDENT
   44           | BType . IDENT LBRACKET RBRACKET
   45           | BType . IDENT LBRACKET RBRACKET Bracket
   46           | BType . IDENT COMMA FuncFParam
   47           | BType . IDENT LBRACKET RBRACKET COMMA FuncFParam
   48           | BType . IDENT LBRACKET RBRACKET Bracket COMMA FuncFParam

    IDENT  shift, and go to state 69


State 34

   41 FuncDef_: IDENT LPAREN FuncFParams . RPAREN Block

    RPAREN  shift, and go to state 70


State 35

   42 FuncFParams: FuncFParam .

    $default  reduce using rule 42 (FuncFParams)


State 36

   67 LVal: IDENT .
   68     | IDENT . LBRACKET Exp RBRACKET
   75 UnaryExp: IDENT . LPAREN RPAREN
   76         | IDENT . LPAREN FuncRParams RPAREN

    LPAREN    shift, and go to state 71
    LBRACKET  shift, and go to state 72

    $default  reduce using rule 67 (LVal)


State 37

   77 UnaryOp: ADD .

    $default  reduce using rule 77 (UnaryOp)


State 38

   78 UnaryOp: SUB .

    $default  reduce using rule 78 (UnaryOp)


State 39

   69 PrimaryExp: LPAREN . Exp RPAREN

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Exp         go to state 73
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 40

   38 InitVal: LBRACE . RBRACE
   39        | LBRACE . Brace RBRACE

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 62
    RBRACE     shift, and go to state 74
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    ConstInitVal  go to state 75
    Brace         go to state 76
    ConstExp      go to state 64
    Exp           go to state 59
    LVal          go to state 45
    PrimaryExp    go to state 46
    Number        go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49
    MulExp        go to state 50
    AddExp        go to state 51
    RelExp        go to state 52
    EqExp         go to state 53
    LAndExp       go to state 54
    LOrExp        go to state 55


State 41

   72 Number: INT_CONST .

    $default  reduce using rule 72 (Number)


State 42

   79 UnaryOp: '!' .

    $default  reduce using rule 79 (UnaryOp)


State 43

   30 VarDef: IDENT ASSIGN InitVal .
   34       | IDENT ASSIGN InitVal . COMMA VarDef

    COMMA  shift, and go to state 77

    $default  reduce using rule 30 (VarDef)


State 44

   37 InitVal: Exp .

    $default  reduce using rule 37 (InitVal)


State 45

   71 PrimaryExp: LVal .

    $default  reduce using rule 71 (PrimaryExp)


State 46

   73 UnaryExp: PrimaryExp .

    $default  reduce using rule 73 (UnaryExp)


State 47

   70 PrimaryExp: Number .

    $default  reduce using rule 70 (PrimaryExp)


State 48

   81 MulExp: UnaryExp .

    $default  reduce using rule 81 (MulExp)


State 49

   74 UnaryExp: UnaryOp . UnaryExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 78
    UnaryOp     go to state 49


State 50

   82 MulExp: MulExp . MUL UnaryExp
   83       | MulExp . DIV UnaryExp
   84       | MulExp . MOD UnaryExp
   85 AddExp: MulExp .

    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 85 (AddExp)


State 51

   86 AddExp: AddExp . ADD MulExp
   87       | AddExp . SUB MulExp
   88 RelExp: AddExp .

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 88 (RelExp)


State 52

   89 RelExp: RelExp . '<' AddExp
   90       | RelExp . '>' AddExp
   91       | RelExp . LE AddExp
   92       | RelExp . GE AddExp
   93 EqExp: RelExp .

    LE   shift, and go to state 84
    GE   shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    $default  reduce using rule 93 (EqExp)


State 53

   94 EqExp: EqExp . EQ RelExp
   95      | EqExp . NE RelExp
   96 LAndExp: EqExp .

    EQ  shift, and go to state 88
    NE  shift, and go to state 89

    $default  reduce using rule 96 (LAndExp)


State 54

   97 LAndExp: LAndExp . AND EqExp
   98 LOrExp: LAndExp .

    AND  shift, and go to state 90

    $default  reduce using rule 98 (LOrExp)


State 55

   65 Exp: LOrExp .
   66    | LOrExp . COMMA Exp
   99 LOrExp: LOrExp . OR LAndExp

    OR     shift, and go to state 91
    COMMA  shift, and go to state 92

    COMMA     [reduce using rule 65 (Exp)]
    $default  reduce using rule 65 (Exp)


State 56

   29 VarDef: IDENT .
   30       | IDENT . ASSIGN InitVal
   31       | IDENT . Bracket
   32       | IDENT . Bracket ASSIGN InitVal
   33       | IDENT . COMMA VarDef
   34       | IDENT . ASSIGN InitVal COMMA VarDef
   35       | IDENT . Bracket COMMA VarDef
   36       | IDENT . Bracket ASSIGN InitVal COMMA VarDef

    ASSIGN    shift, and go to state 24
    COMMA     shift, and go to state 25
    LBRACKET  shift, and go to state 26

    $default  reduce using rule 29 (VarDef)

    Bracket  go to state 27


State 57

   33 VarDef: IDENT COMMA VarDef .

    $default  reduce using rule 33 (VarDef)


State 58

   18 Bracket: LBRACKET ConstExp . RBRACKET
   19        | LBRACKET ConstExp . RBRACKET Bracket

    RBRACKET  shift, and go to state 93


State 59

   25 ConstExp: Exp .
   26         | Exp . COMMA ConstExp

    COMMA  shift, and go to state 94

    COMMA     [reduce using rule 25 (ConstExp)]
    $default  reduce using rule 25 (ConstExp)


State 60

   32 VarDef: IDENT Bracket ASSIGN . InitVal
   36       | IDENT Bracket ASSIGN . InitVal COMMA VarDef

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 40
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    InitVal     go to state 95
    Exp         go to state 44
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 61

   35 VarDef: IDENT Bracket COMMA . VarDef

    IDENT  shift, and go to state 56

    VarDef  go to state 96


State 62

   21 ConstInitVal: LBRACE . Brace RBRACE
   22             | LBRACE . RBRACE

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 62
    RBRACE     shift, and go to state 97
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    ConstInitVal  go to state 75
    Brace         go to state 98
    ConstExp      go to state 64
    Exp           go to state 59
    LVal          go to state 45
    PrimaryExp    go to state 46
    Number        go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49
    MulExp        go to state 50
    AddExp        go to state 51
    RelExp        go to state 52
    EqExp         go to state 53
    LAndExp       go to state 54
    LOrExp        go to state 55


State 63

   14 ConstDef: IDENT ASSIGN ConstInitVal .
   15         | IDENT ASSIGN ConstInitVal . COMMA ConstDef

    COMMA  shift, and go to state 99

    $default  reduce using rule 14 (ConstDef)


State 64

   20 ConstInitVal: ConstExp .

    $default  reduce using rule 20 (ConstInitVal)


State 65

   16 ConstDef: IDENT LBRACKET Bracket . RBRACKET ASSIGN ConstInitVal

    RBRACKET  shift, and go to state 100


State 66

   17 ConstDef: IDENT LBRACKET ConstExp . RBRACKET ASSIGN ConstInitVal COMMA ConstDef

    RBRACKET  shift, and go to state 101


State 67

   49 Block: LBRACE . BlockItem RBRACE

    IDENT      shift, and go to state 36
    INT        shift, and go to state 1
    RETURN     shift, and go to state 102
    CONST      shift, and go to state 2
    IF         shift, and go to state 103
    WHILE      shift, and go to state 104
    CONTINUE   shift, and go to state 105
    BREAK      shift, and go to state 106
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    SEMI       shift, and go to state 107
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 67
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Decl        go to state 108
    ConstDecl   go to state 109
    BType       go to state 110
    VarDecl     go to state 111
    Block       go to state 112
    BlockItem   go to state 113
    Stmt        go to state 114
    Exp         go to state 115
    LVal        go to state 116
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 68

   40 FuncDef_: IDENT LPAREN RPAREN Block .

    $default  reduce using rule 40 (FuncDef_)


State 69

   43 FuncFParam: BType IDENT .
   44           | BType IDENT . LBRACKET RBRACKET
   45           | BType IDENT . LBRACKET RBRACKET Bracket
   46           | BType IDENT . COMMA FuncFParam
   47           | BType IDENT . LBRACKET RBRACKET COMMA FuncFParam
   48           | BType IDENT . LBRACKET RBRACKET Bracket COMMA FuncFParam

    COMMA     shift, and go to state 117
    LBRACKET  shift, and go to state 118

    $default  reduce using rule 43 (FuncFParam)


State 70

   41 FuncDef_: IDENT LPAREN FuncFParams RPAREN . Block

    LBRACE  shift, and go to state 67

    Block  go to state 119


State 71

   75 UnaryExp: IDENT LPAREN . RPAREN
   76         | IDENT LPAREN . FuncRParams RPAREN

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    RPAREN     shift, and go to state 120
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Exp          go to state 121
    LVal         go to state 45
    PrimaryExp   go to state 46
    Number       go to state 47
    UnaryExp     go to state 48
    UnaryOp      go to state 49
    FuncRParams  go to state 122
    MulExp       go to state 50
    AddExp       go to state 51
    RelExp       go to state 52
    EqExp        go to state 53
    LAndExp      go to state 54
    LOrExp       go to state 55


State 72

   68 LVal: IDENT LBRACKET . Exp RBRACKET

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Exp         go to state 123
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 73

   69 PrimaryExp: LPAREN Exp . RPAREN

    RPAREN  shift, and go to state 124


State 74

   38 InitVal: LBRACE RBRACE .

    $default  reduce using rule 38 (InitVal)


State 75

   23 Brace: ConstInitVal .
   24      | ConstInitVal . COMMA Brace

    COMMA  shift, and go to state 125

    $default  reduce using rule 23 (Brace)


State 76

   39 InitVal: LBRACE Brace . RBRACE

    RBRACE  shift, and go to state 126


State 77

   34 VarDef: IDENT ASSIGN InitVal COMMA . VarDef

    IDENT  shift, and go to state 56

    VarDef  go to state 127


State 78

   74 UnaryExp: UnaryOp UnaryExp .

    $default  reduce using rule 74 (UnaryExp)


State 79

   82 MulExp: MulExp MUL . UnaryExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 128
    UnaryOp     go to state 49


State 80

   83 MulExp: MulExp DIV . UnaryExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 129
    UnaryOp     go to state 49


State 81

   84 MulExp: MulExp MOD . UnaryExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 130
    UnaryOp     go to state 49


State 82

   86 AddExp: AddExp ADD . MulExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 131


State 83

   87 AddExp: AddExp SUB . MulExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 132


State 84

   91 RelExp: RelExp LE . AddExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 133


State 85

   92 RelExp: RelExp GE . AddExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 134


State 86

   89 RelExp: RelExp '<' . AddExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 135


State 87

   90 RelExp: RelExp '>' . AddExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 136


State 88

   94 EqExp: EqExp EQ . RelExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 137


State 89

   95 EqExp: EqExp NE . RelExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 138


State 90

   97 LAndExp: LAndExp AND . EqExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 139


State 91

   99 LOrExp: LOrExp OR . LAndExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 140


State 92

   66 Exp: LOrExp COMMA . Exp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Exp         go to state 141
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 93

   18 Bracket: LBRACKET ConstExp RBRACKET .
   19        | LBRACKET ConstExp RBRACKET . Bracket

    LBRACKET  shift, and go to state 26

    $default  reduce using rule 18 (Bracket)

    Bracket  go to state 142


State 94

   26 ConstExp: Exp COMMA . ConstExp

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    ConstExp    go to state 143
    Exp         go to state 59
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 95

   32 VarDef: IDENT Bracket ASSIGN InitVal .
   36       | IDENT Bracket ASSIGN InitVal . COMMA VarDef

    COMMA  shift, and go to state 144

    $default  reduce using rule 32 (VarDef)


State 96

   35 VarDef: IDENT Bracket COMMA VarDef .

    $default  reduce using rule 35 (VarDef)


State 97

   22 ConstInitVal: LBRACE RBRACE .

    $default  reduce using rule 22 (ConstInitVal)


State 98

   21 ConstInitVal: LBRACE Brace . RBRACE

    RBRACE  shift, and go to state 145


State 99

   15 ConstDef: IDENT ASSIGN ConstInitVal COMMA . ConstDef

    IDENT  shift, and go to state 20

    ConstDef  go to state 146


State 100

   16 ConstDef: IDENT LBRACKET Bracket RBRACKET . ASSIGN ConstInitVal

    ASSIGN  shift, and go to state 147


State 101

   17 ConstDef: IDENT LBRACKET ConstExp RBRACKET . ASSIGN ConstInitVal COMMA ConstDef

    ASSIGN  shift, and go to state 148


State 102

   58 Stmt: RETURN . SEMI
   59     | RETURN . Exp SEMI

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    SEMI       shift, and go to state 149
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Exp         go to state 150
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 103

   60 Stmt: IF . LPAREN Exp RPAREN Stmt
   61     | IF . LPAREN Exp RPAREN Stmt ELSE Stmt

    LPAREN  shift, and go to state 151


State 104

   62 Stmt: WHILE . LPAREN Exp RPAREN Stmt

    LPAREN  shift, and go to state 152


State 105

   64 Stmt: CONTINUE . SEMI

    SEMI  shift, and go to state 153


State 106

   63 Stmt: BREAK . SEMI

    SEMI  shift, and go to state 154


State 107

   55 Stmt: SEMI .

    $default  reduce using rule 55 (Stmt)


State 108

   50 BlockItem: Decl .
   52          | Decl . BlockItem

    IDENT      shift, and go to state 36
    INT        shift, and go to state 1
    RETURN     shift, and go to state 102
    CONST      shift, and go to state 2
    IF         shift, and go to state 103
    WHILE      shift, and go to state 104
    CONTINUE   shift, and go to state 105
    BREAK      shift, and go to state 106
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    SEMI       shift, and go to state 107
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 67
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    $default  reduce using rule 50 (BlockItem)

    Decl        go to state 108
    ConstDecl   go to state 109
    BType       go to state 110
    VarDecl     go to state 111
    Block       go to state 112
    BlockItem   go to state 155
    Stmt        go to state 114
    Exp         go to state 115
    LVal        go to state 116
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 109

   10 Decl: ConstDecl .

    $default  reduce using rule 10 (Decl)


State 110

   27 VarDecl: BType . VarDef SEMI

    IDENT  shift, and go to state 56

    VarDef  go to state 156


State 111

   11 Decl: VarDecl .

    $default  reduce using rule 11 (Decl)


State 112

   57 Stmt: Block .

    $default  reduce using rule 57 (Stmt)


State 113

   49 Block: LBRACE BlockItem . RBRACE

    RBRACE  shift, and go to state 157


State 114

   51 BlockItem: Stmt .
   53          | Stmt . BlockItem

    IDENT      shift, and go to state 36
    INT        shift, and go to state 1
    RETURN     shift, and go to state 102
    CONST      shift, and go to state 2
    IF         shift, and go to state 103
    WHILE      shift, and go to state 104
    CONTINUE   shift, and go to state 105
    BREAK      shift, and go to state 106
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    SEMI       shift, and go to state 107
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 67
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    $default  reduce using rule 51 (BlockItem)

    Decl        go to state 108
    ConstDecl   go to state 109
    BType       go to state 110
    VarDecl     go to state 111
    Block       go to state 112
    BlockItem   go to state 158
    Stmt        go to state 114
    Exp         go to state 115
    LVal        go to state 116
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 115

   56 Stmt: Exp . SEMI

    SEMI  shift, and go to state 159


State 116

   54 Stmt: LVal . ASSIGN Exp SEMI
   71 PrimaryExp: LVal .

    ASSIGN  shift, and go to state 160

    $default  reduce using rule 71 (PrimaryExp)


State 117

   46 FuncFParam: BType IDENT COMMA . FuncFParam

    INT  shift, and go to state 1

    BType       go to state 33
    FuncFParam  go to state 161


State 118

   44 FuncFParam: BType IDENT LBRACKET . RBRACKET
   45           | BType IDENT LBRACKET . RBRACKET Bracket
   47           | BType IDENT LBRACKET . RBRACKET COMMA FuncFParam
   48           | BType IDENT LBRACKET . RBRACKET Bracket COMMA FuncFParam

    RBRACKET  shift, and go to state 162


State 119

   41 FuncDef_: IDENT LPAREN FuncFParams RPAREN Block .

    $default  reduce using rule 41 (FuncDef_)


State 120

   75 UnaryExp: IDENT LPAREN RPAREN .

    $default  reduce using rule 75 (UnaryExp)


State 121

   80 FuncRParams: Exp .

    $default  reduce using rule 80 (FuncRParams)


State 122

   76 UnaryExp: IDENT LPAREN FuncRParams . RPAREN

    RPAREN  shift, and go to state 163


State 123

   68 LVal: IDENT LBRACKET Exp . RBRACKET

    RBRACKET  shift, and go to state 164


State 124

   69 PrimaryExp: LPAREN Exp RPAREN .

    $default  reduce using rule 69 (PrimaryExp)


State 125

   24 Brace: ConstInitVal COMMA . Brace

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 62
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    ConstInitVal  go to state 75
    Brace         go to state 165
    ConstExp      go to state 64
    Exp           go to state 59
    LVal          go to state 45
    PrimaryExp    go to state 46
    Number        go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49
    MulExp        go to state 50
    AddExp        go to state 51
    RelExp        go to state 52
    EqExp         go to state 53
    LAndExp       go to state 54
    LOrExp        go to state 55


State 126

   39 InitVal: LBRACE Brace RBRACE .

    $default  reduce using rule 39 (InitVal)


State 127

   34 VarDef: IDENT ASSIGN InitVal COMMA VarDef .

    $default  reduce using rule 34 (VarDef)


State 128

   82 MulExp: MulExp MUL UnaryExp .

    $default  reduce using rule 82 (MulExp)


State 129

   83 MulExp: MulExp DIV UnaryExp .

    $default  reduce using rule 83 (MulExp)


State 130

   84 MulExp: MulExp MOD UnaryExp .

    $default  reduce using rule 84 (MulExp)


State 131

   82 MulExp: MulExp . MUL UnaryExp
   83       | MulExp . DIV UnaryExp
   84       | MulExp . MOD UnaryExp
   86 AddExp: AddExp ADD MulExp .

    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 86 (AddExp)


State 132

   82 MulExp: MulExp . MUL UnaryExp
   83       | MulExp . DIV UnaryExp
   84       | MulExp . MOD UnaryExp
   87 AddExp: AddExp SUB MulExp .

    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 87 (AddExp)


State 133

   86 AddExp: AddExp . ADD MulExp
   87       | AddExp . SUB MulExp
   91 RelExp: RelExp LE AddExp .

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 91 (RelExp)


State 134

   86 AddExp: AddExp . ADD MulExp
   87       | AddExp . SUB MulExp
   92 RelExp: RelExp GE AddExp .

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 92 (RelExp)


State 135

   86 AddExp: AddExp . ADD MulExp
   87       | AddExp . SUB MulExp
   89 RelExp: RelExp '<' AddExp .

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 89 (RelExp)


State 136

   86 AddExp: AddExp . ADD MulExp
   87       | AddExp . SUB MulExp
   90 RelExp: RelExp '>' AddExp .

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83

    $default  reduce using rule 90 (RelExp)


State 137

   89 RelExp: RelExp . '<' AddExp
   90       | RelExp . '>' AddExp
   91       | RelExp . LE AddExp
   92       | RelExp . GE AddExp
   94 EqExp: EqExp EQ RelExp .

    LE   shift, and go to state 84
    GE   shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    $default  reduce using rule 94 (EqExp)


State 138

   89 RelExp: RelExp . '<' AddExp
   90       | RelExp . '>' AddExp
   91       | RelExp . LE AddExp
   92       | RelExp . GE AddExp
   95 EqExp: EqExp NE RelExp .

    LE   shift, and go to state 84
    GE   shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    $default  reduce using rule 95 (EqExp)


State 139

   94 EqExp: EqExp . EQ RelExp
   95      | EqExp . NE RelExp
   97 LAndExp: LAndExp AND EqExp .

    EQ  shift, and go to state 88
    NE  shift, and go to state 89

    $default  reduce using rule 97 (LAndExp)


State 140

   97 LAndExp: LAndExp . AND EqExp
   99 LOrExp: LOrExp OR LAndExp .

    AND  shift, and go to state 90

    $default  reduce using rule 99 (LOrExp)


State 141

   66 Exp: LOrExp COMMA Exp .

    $default  reduce using rule 66 (Exp)


State 142

   19 Bracket: LBRACKET ConstExp RBRACKET Bracket .

    $default  reduce using rule 19 (Bracket)


State 143

   26 ConstExp: Exp COMMA ConstExp .

    $default  reduce using rule 26 (ConstExp)


State 144

   36 VarDef: IDENT Bracket ASSIGN InitVal COMMA . VarDef

    IDENT  shift, and go to state 56

    VarDef  go to state 166


State 145

   21 ConstInitVal: LBRACE Brace RBRACE .

    $default  reduce using rule 21 (ConstInitVal)


State 146

   15 ConstDef: IDENT ASSIGN ConstInitVal COMMA ConstDef .

    $default  reduce using rule 15 (ConstDef)


State 147

   16 ConstDef: IDENT LBRACKET Bracket RBRACKET ASSIGN . ConstInitVal

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 62
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    ConstInitVal  go to state 167
    ConstExp      go to state 64
    Exp           go to state 59
    LVal          go to state 45
    PrimaryExp    go to state 46
    Number        go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49
    MulExp        go to state 50
    AddExp        go to state 51
    RelExp        go to state 52
    EqExp         go to state 53
    LAndExp       go to state 54
    LOrExp        go to state 55


State 148

   17 ConstDef: IDENT LBRACKET ConstExp RBRACKET ASSIGN . ConstInitVal COMMA ConstDef

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 62
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    ConstInitVal  go to state 168
    ConstExp      go to state 64
    Exp           go to state 59
    LVal          go to state 45
    PrimaryExp    go to state 46
    Number        go to state 47
    UnaryExp      go to state 48
    UnaryOp       go to state 49
    MulExp        go to state 50
    AddExp        go to state 51
    RelExp        go to state 52
    EqExp         go to state 53
    LAndExp       go to state 54
    LOrExp        go to state 55


State 149

   58 Stmt: RETURN SEMI .

    $default  reduce using rule 58 (Stmt)


State 150

   59 Stmt: RETURN Exp . SEMI

    SEMI  shift, and go to state 169


State 151

   60 Stmt: IF LPAREN . Exp RPAREN Stmt
   61     | IF LPAREN . Exp RPAREN Stmt ELSE Stmt

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Exp         go to state 170
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 152

   62 Stmt: WHILE LPAREN . Exp RPAREN Stmt

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Exp         go to state 171
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 153

   64 Stmt: CONTINUE SEMI .

    $default  reduce using rule 64 (Stmt)


State 154

   63 Stmt: BREAK SEMI .

    $default  reduce using rule 63 (Stmt)


State 155

   52 BlockItem: Decl BlockItem .

    $default  reduce using rule 52 (BlockItem)


State 156

   27 VarDecl: BType VarDef . SEMI

    SEMI  shift, and go to state 172


State 157

   49 Block: LBRACE BlockItem RBRACE .

    $default  reduce using rule 49 (Block)


State 158

   53 BlockItem: Stmt BlockItem .

    $default  reduce using rule 53 (BlockItem)


State 159

   56 Stmt: Exp SEMI .

    $default  reduce using rule 56 (Stmt)


State 160

   54 Stmt: LVal ASSIGN . Exp SEMI

    IDENT      shift, and go to state 36
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    LPAREN     shift, and go to state 39
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Exp         go to state 173
    LVal        go to state 45
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 161

   46 FuncFParam: BType IDENT COMMA FuncFParam .

    $default  reduce using rule 46 (FuncFParam)


State 162

   44 FuncFParam: BType IDENT LBRACKET RBRACKET .
   45           | BType IDENT LBRACKET RBRACKET . Bracket
   47           | BType IDENT LBRACKET RBRACKET . COMMA FuncFParam
   48           | BType IDENT LBRACKET RBRACKET . Bracket COMMA FuncFParam

    COMMA     shift, and go to state 174
    LBRACKET  shift, and go to state 26

    $default  reduce using rule 44 (FuncFParam)

    Bracket  go to state 175


State 163

   76 UnaryExp: IDENT LPAREN FuncRParams RPAREN .

    $default  reduce using rule 76 (UnaryExp)


State 164

   68 LVal: IDENT LBRACKET Exp RBRACKET .

    $default  reduce using rule 68 (LVal)


State 165

   24 Brace: ConstInitVal COMMA Brace .

    $default  reduce using rule 24 (Brace)


State 166

   36 VarDef: IDENT Bracket ASSIGN InitVal COMMA VarDef .

    $default  reduce using rule 36 (VarDef)


State 167

   16 ConstDef: IDENT LBRACKET Bracket RBRACKET ASSIGN ConstInitVal .

    $default  reduce using rule 16 (ConstDef)


State 168

   17 ConstDef: IDENT LBRACKET ConstExp RBRACKET ASSIGN ConstInitVal . COMMA ConstDef

    COMMA  shift, and go to state 176


State 169

   59 Stmt: RETURN Exp SEMI .

    $default  reduce using rule 59 (Stmt)


State 170

   60 Stmt: IF LPAREN Exp . RPAREN Stmt
   61     | IF LPAREN Exp . RPAREN Stmt ELSE Stmt

    RPAREN  shift, and go to state 177


State 171

   62 Stmt: WHILE LPAREN Exp . RPAREN Stmt

    RPAREN  shift, and go to state 178


State 172

   27 VarDecl: BType VarDef SEMI .

    $default  reduce using rule 27 (VarDecl)


State 173

   54 Stmt: LVal ASSIGN Exp . SEMI

    SEMI  shift, and go to state 179


State 174

   47 FuncFParam: BType IDENT LBRACKET RBRACKET COMMA . FuncFParam

    INT  shift, and go to state 1

    BType       go to state 33
    FuncFParam  go to state 180


State 175

   45 FuncFParam: BType IDENT LBRACKET RBRACKET Bracket .
   48           | BType IDENT LBRACKET RBRACKET Bracket . COMMA FuncFParam

    COMMA  shift, and go to state 181

    $default  reduce using rule 45 (FuncFParam)


State 176

   17 ConstDef: IDENT LBRACKET ConstExp RBRACKET ASSIGN ConstInitVal COMMA . ConstDef

    IDENT  shift, and go to state 20

    ConstDef  go to state 182


State 177

   60 Stmt: IF LPAREN Exp RPAREN . Stmt
   61     | IF LPAREN Exp RPAREN . Stmt ELSE Stmt

    IDENT      shift, and go to state 36
    RETURN     shift, and go to state 102
    IF         shift, and go to state 103
    WHILE      shift, and go to state 104
    CONTINUE   shift, and go to state 105
    BREAK      shift, and go to state 106
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    SEMI       shift, and go to state 107
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 67
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Block       go to state 112
    Stmt        go to state 183
    Exp         go to state 115
    LVal        go to state 116
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 178

   62 Stmt: WHILE LPAREN Exp RPAREN . Stmt

    IDENT      shift, and go to state 36
    RETURN     shift, and go to state 102
    IF         shift, and go to state 103
    WHILE      shift, and go to state 104
    CONTINUE   shift, and go to state 105
    BREAK      shift, and go to state 106
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    SEMI       shift, and go to state 107
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 67
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Block       go to state 112
    Stmt        go to state 184
    Exp         go to state 115
    LVal        go to state 116
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 179

   54 Stmt: LVal ASSIGN Exp SEMI .

    $default  reduce using rule 54 (Stmt)


State 180

   47 FuncFParam: BType IDENT LBRACKET RBRACKET COMMA FuncFParam .

    $default  reduce using rule 47 (FuncFParam)


State 181

   48 FuncFParam: BType IDENT LBRACKET RBRACKET Bracket COMMA . FuncFParam

    INT  shift, and go to state 1

    BType       go to state 33
    FuncFParam  go to state 185


State 182

   17 ConstDef: IDENT LBRACKET ConstExp RBRACKET ASSIGN ConstInitVal COMMA ConstDef .

    $default  reduce using rule 17 (ConstDef)


State 183

   60 Stmt: IF LPAREN Exp RPAREN Stmt .
   61     | IF LPAREN Exp RPAREN Stmt . ELSE Stmt

    ELSE  shift, and go to state 186

    ELSE      [reduce using rule 60 (Stmt)]
    $default  reduce using rule 60 (Stmt)


State 184

   62 Stmt: WHILE LPAREN Exp RPAREN Stmt .

    $default  reduce using rule 62 (Stmt)


State 185

   48 FuncFParam: BType IDENT LBRACKET RBRACKET Bracket COMMA FuncFParam .

    $default  reduce using rule 48 (FuncFParam)


State 186

   61 Stmt: IF LPAREN Exp RPAREN Stmt ELSE . Stmt

    IDENT      shift, and go to state 36
    RETURN     shift, and go to state 102
    IF         shift, and go to state 103
    WHILE      shift, and go to state 104
    CONTINUE   shift, and go to state 105
    BREAK      shift, and go to state 106
    ADD        shift, and go to state 37
    SUB        shift, and go to state 38
    SEMI       shift, and go to state 107
    LPAREN     shift, and go to state 39
    LBRACE     shift, and go to state 67
    INT_CONST  shift, and go to state 41
    '!'        shift, and go to state 42

    Block       go to state 112
    Stmt        go to state 187
    Exp         go to state 115
    LVal        go to state 116
    PrimaryExp  go to state 46
    Number      go to state 47
    UnaryExp    go to state 48
    UnaryOp     go to state 49
    MulExp      go to state 50
    AddExp      go to state 51
    RelExp      go to state 52
    EqExp       go to state 53
    LAndExp     go to state 54
    LOrExp      go to state 55


State 187

   61 Stmt: IF LPAREN Exp RPAREN Stmt ELSE Stmt .

    $default  reduce using rule 61 (Stmt)
